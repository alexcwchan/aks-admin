name: Create AKS App

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      appname:
        description: New Application Name
        type: string
        required: true

permissions:
  id-token: write
  contents: read
#  actions: read

env:
  APP_NAME: aks-app-${{ github.event.inputs.appname }}

jobs:

  initCheck:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      app_check: ${{ steps.app_check.outputs.status }}
      ns_check: ${{ steps.ns_check.outputs.status }}
      acrrepo_check: ${{ steps.acrrepo_check.outputs.status }}
      acrtoken_check: ${{ steps.acrtoken_check.outputs.status }}
      githubrepo_check: ${{ steps.githubrepo_check.outputs.status }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Azure login OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: kubelogin with AKS
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.34'

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ vars.AKS_CLUSTER }}
        admin: false
        use-kubelogin: true

    - name: Check Azure App
      id: app_check
      run: echo "status=$(az ad app list --filter "displayname eq '${{ env.APP_NAME }}'" --output tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check AKS namespace
      id: ns_check
      run: echo "status=$(kubectl get namespace ${{ env.APP_NAME }} --ignore-not-found true --no-headers true | wc -l)" >> $GITHUB_OUTPUT

    - name: Check ACR repository
      id: acrrepo_check
      run: echo "status=$(az acr repository list -n ${{ vars.ACR_REGISTRY }} --query "[?contains(@, '${{ env.APP_NAME }}')]" --output tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check ACR token
      id: acrtoken_check
      run: echo "status=$(az acr token list -r ${{ vars.ACR_REGISTRY }} --query "[?name == '${{ env.APP_NAME }}'].name" --output tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check Github repository
      id: githubrepo_check
      run: echo "status=$(gh repo list ${{ vars.GH_ORG }} --json name | grep '\"${{ env.APP_NAME }}\"' | wc -l)" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Display check status
      run: |
        echo "App check: ${{ steps.app_check.outputs.status }}"
        echo "Namespace check: ${{ steps.ns_check.outputs.status }}"
        echo "ARC repository check: ${{ steps.acrrepo_check.outputs.status }}"
        echo "ACR token check: ${{ steps.acrtoken_check.outputs.status }}"
        echo "Github repository check: ${{ steps.githubrepo_check.outputs.status }}"


  deploy:
    runs-on: ubuntu-latest
    needs: initCheck
    # only run this step if all checks return false
    if: |-
      ${{
        needs.initCheck.outputs.app_check == '0' &&
        needs.initCheck.outputs.ns_check == '0' &&
        needs.initCheck.outputs.acrtoken_check == '0' &&
        needs.initCheck.outputs.acrtoken_check == '0' &&
        needs.initCheck.outputs.githubrepo_check == '0'
      }}

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Replace token with env variables
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        files: '["./federated-credential.json"]'
      env:
        APP_NAME: ${{ env.APP_NAME }}
        GH_ORG: ${{ vars.GH_ORG }}

    - name: Azure login OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: kubelogin with AKS
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.34'

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ vars.AKS_CLUSTER }}
        admin: false
        use-kubelogin: true

#    - name: Register an App
#      run: echo "AZURE_APP_ID=$(az ad app create --display-name ${{ env.APP_NAME }} --query "appId" --output tsv)" >> $GITHUB_ENV

#    - name: Add App owner
#      run: az ad app owner add --id ${{ env.AZURE_APP_ID }} --owner-object-id b14a3839-eae6-453b-a37f-0e12ff845aa4

#    - name: Create Federated Credential
#      run: az ad app federated-credential create --id ${{ env.AZURE_APP_ID }} --parameters federated-credential.json

#    - name: Create ACR repository token
#      run: echo "ACR_SECRET=$(az acr token create --name "${{ env.APP_NAME }}" --registry ${{ vars.ACR_REGISTRY }} --repository ${{ env.APP_NAME }}/* content/write content/read --only-show-errors --query "credentials.passwords[?name=='password1'].value" --output tsv)" >> $GITHUB_ENV

    - name: Create AKS namespace, apply resource quota and network policy
      run: |
        kubectl create namespace ${{ env.APP_NAME }}
        kubectl apply -f ./networkpolicy.yaml -f ./resourceqouta.yaml -n ${{ env.APP_NAME }}

    - name: Create Github repository
      run: |
        gh repo create ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --template ${{ vars.GH_ORG }}/aks_template --private
        gh secret set ACR_TOKEN --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --body "$token"
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        token: ${{ env.ACR_SECRET }}

    - name: Debug
      run: |
        cat ./federated-credential.json
        cat ./networkpolicy.yaml
        cat ./resourceqouta.yaml
        echo ${{ env.APP_NAME }}
        echo ${{ env.AZURE_APP_ID }}
        echo ${{ env.ACR_SECRET }}

#      - name: Azure CLI script
#        uses: azure/CLI@v1
#        with:
#          azcliversion: latest
#          inlineScript: |
#            az ad app create --display-name ${{ github.event.inputs.name }} --query []."id" | awk -F '"' '{print $2}'



