name: Create AKS App

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      appname:
        description: New Application Name
        type: string
        required: true

permissions:
  id-token: write
  contents: read
#  actions: read

env:
  APP_NAME: aks-app-${{ github.event.inputs.appname }}
  ACR_TOKEN: "aks-app-${{ github.event.inputs.appname }}"

jobs:

  initCheck:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      app_check: ${{ steps.app_check.outputs.status }}
      ns_check: ${{ steps.ns_check.outputs.status }}
      acrrepo_check: ${{ steps.acrrepo_check.outputs.status }}
      githubrepo_check: ${{ steps.githubrepo_check.outputs.status }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Azure login OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: kubelogin with AKS
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.34'

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER }}
        admin: false
        use-kubelogin: true

    - name: Check Azure App registration
      id: app_check
      run: echo "status=0" >> $GITHUB_OUTPUT
#        az ad app list --filter "displayname eq '${{ env.APP_NAME }}'" --output tsv | wc -l
#        echo "status=$(az acr repository list -n ${{ secrets.ACR }} | grep '\"${{ env.APP_NAME }}/' | wc -l)" >> $GITHUB_OUTPUT

    - name: Check AKS namespace
      id: ns_check
      run: echo "status=$(kubectl get namespace | grep '^${{ env.APP_NAME }} ' | wc -l)" >> $GITHUB_OUTPUT

    - name: Check ACR repository
      id: acrrepo_check
      run: echo "status=$(az acr repository list -n ${{ secrets.ACR }} | grep '\"${{ env.APP_NAME }}/' | wc -l)" >> $GITHUB_OUTPUT
    
    - name: Check Github repository
      id: githubrepo_check
      run: echo "status=$(gh repo list ${{ secrets.GH_ORG }} --json name | grep '\"${{ env.APP_NAME }}\"' | wc -l)" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Debug check status
      run: |
        echo "App check: ${{ needs.initCheck.outputs.app_check }}"
        echo "Namespace check: ${{ needs.initCheck.outputs.ns_check }}"
        echo "ARC repository check: ${{ needs.initCheck.outputs.acrrepo_check }}"
        echo "Github repository: ${{ needs.initCheck.outputs.githubrepo_check }}"


  deploy:
    runs-on: ubuntu-latest
    needs: initCheck
    # only run this step if all checks return false
    if: ${{ needs.initCheck.outputs.app_check == '0' && needs.initCheck.outputs.ns_check == '0' && needs.initCheck.outputs.acrrepo_check == '0' && needs.initCheck.outputs.githubrepo_check == '0' }}

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Replace token with env variables
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        files: '["./federated-credential.json"]'
      env:
        APP_NAME: ${{ env.APP_NAME }}

#    - name: Azure login OIDC
#      uses: azure/login@v1
#      with:
#        client-id: ${{ secrets.AZURE_CLIENT_ID }}
#        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
#    - name: kubelogin with AKS
#      uses: azure/use-kubelogin@v1
#      with:
#        kubelogin-version: 'v0.0.34'

#    - name: Set AKS context
#      uses: azure/aks-set-context@v3
#      with:
#        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
#        cluster-name: ${{ secrets.AKS_CLUSTER }}
#        admin: false
#        use-kubelogin: true

#    - name: Register an App
#      run: |
#        echo "AZURE_APP_ID=$(az ad app create --display-name ${{ env.AZURE_APP_NAME }} --query "id" | tr -d '"')" >> $GITHUB_ENV

#    - name: Create Federated Credential
#      run: |
#        az ad app federated-credential create --id ${{ env.AZURE_APP_ID }} --parameters federated-credential.json

#    - name: Create Token for Azure Container Registry
#      run: |
#        az acr token create --name ${{ env.AZURE_ACR_TOKEN }} --registry acrforhkusttest --repository ${{ env.AZURE_APP_NAME }} content/write content/read

#      - name: Echo Env variable
#        run: |
#          echo $APP_NAME
#          echo $AZURE_APP_ID
#          echo $AZURE_APP_NAME
#          echo $AZURE_ACR_TOKEN


#      - name: Azure CLI script
#        uses: azure/CLI@v1
#        with:
#          azcliversion: latest
#          inlineScript: |
#            az ad app create --display-name ${{ github.event.inputs.name }} --query []."id" | awk -F '"' '{print $2}'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!

      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.

      # run gh cli to manage new repo
#      - run: |
#          gh repo create ${{ github.event.inputs.name }} --template alexcwchan/aks_template --private
#          gh secret set AKS_TOKEN --repo alexcwchan/${{ github.event.inputs.name }} --body "$token"
#        env:
#          GH_TOKEN: ${{ secrets.GH_TOKEN }}
#          token: "123"

