name: Create AKS App

on:
  workflow_dispatch:
    inputs:
      appname:
        description: Application Name (e.g. app1)
        required: true
      faculty_in_charge:
        description: Input Faculty owners' emails (seperate with ":")
        required: true
      staff_in_charge:
        description: Input Technical owners' emails (seperate with ":")
        required: true
      department:
        description: input the department code which own the website
        required: true
      url:
        description: Input site domain name (e.g. app1.hkust.edu.hk)
        required: true
      pvc:
        description: Persistent Volume size (default, 1Gi)
        type: choice
        required: true
        default: '1'
        options:
          - 1
          - 2
          - 3
          - 4
          - 5
      needenv:
        description: Required Environment (default, Prod only)
        type: choice
        required: true
        default: 'Prod'
        options:
          - Prod
          - Prod-Dev
          - Prod-Uat-Dev
      agentpooldev:
        description: Assigned AKS Dev NodePool
        type: choice
        required: true
        default: npuser01
        options:
          - npuser01
      agentpooluat:
        description: Assigned AKS UAT NodePool
        type: choice
        required: true
        default: npuser01
        options:
          - npuser01
      agentpoolprod:
        description: Assigned AKS Prod NodePool
        type: choice
        required: true
        default: npuser01
        options:
          - npuser01

permissions:
  id-token: write
  contents: read

env:
  APP_NAME: aksapp-${{ inputs.appname }}
  ACR_REPO: aksapp/${{ inputs.appname }}

jobs:

  initCheckDev:
    runs-on: ubuntu-latest
    if: |-
      ${{
        inputs.needenv == 'Prod-Dev' ||
        inputs.needenv == 'Prod-Uat-Dev'
      }}
    outputs:
      app_check: ${{ steps.app_check.outputs.status }}
      sp check: ${{ steps.sp_check.outputs.status }}
      acrrepo_check: ${{ steps.acrrepo_check.outputs.status }}
      acrtoken_check: ${{ steps.acrtoken_check.outputs.status }}
      acrscope_check: ${{ steps.acrscope_check.outputs.status }}
      ns_check: ${{ steps.ns_check.outputs.status }}
      githubrepo_check: ${{ steps.githubrepo_check.outputs.status }}

    steps:
    - name: Azure login OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: kubelogin with AKS
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.34'

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ vars.AKS_CLUSTER }}
        admin: false
        use-kubelogin: true

    - name: Check Azure App
      id: app_check
      run: echo "status=$(az ad app list --filter "displayname eq '${{ env.APP_NAME }}'" -o tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check Azure SP
      id: sp_check
      run: echo "status=$(az ad sp list --display-name '${{ env.APP_NAME }}' -o tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check ACR repository
      id: acrrepo_check
      run: echo "status=$(az acr repository list -n ${{ vars.ACR_REGISTRY }} --query "[?contains(@, '${{ env.ACR_REPO }}')]" -o tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check ACR token
      id: acrtoken_check
      run: echo "status=$(az acr token show -r ${{ vars.ACR_REGISTRY }} -n ${{ env.APP_NAME }} -o tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check ACR scope map
      id: acrscope_check
      run: echo "status=$(az acr scope-map show -r ${{ vars.ACR_REGISTRY }} -n ${{ env.APP_NAME }}-scope-map -o tsv | wc -l)" >> $GITHUB_OUTPUT

    - name: Check AKS namespace
      id: ns_check
      run: echo "status=$(kubectl get namespace ${{ env.APP_NAME }} --ignore-not-found --no-headers | wc -l)" >> $GITHUB_OUTPUT

    - name: Check Github repository
      id: githubrepo_check
      run: echo "status=$(gh repo list ${{ vars.GH_ORG }} --json name | grep '\"${{ env.APP_NAME }}\"' | wc -l)" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Display check status
      run: |
        echo "App check: ${{ steps.app_check.outputs.status }}"
        echo "SP check: ${{ steps.sp_check.outputs.status }}"
        echo "ARC repository check: ${{ steps.acrrepo_check.outputs.status }}"
        echo "ACR token check: ${{ steps.acrtoken_check.outputs.status }}"
        echo "ACR scope map check: ${{ steps.acrscope_check.outputs.status }}"
        echo "Namespace check: ${{ steps.ns_check.outputs.status }}"
        echo "Github repository check: ${{ steps.githubrepo_check.outputs.status }}"


  deployDev:
    runs-on: ubuntu-latest
    needs: initCheckDev
    # only run this step if all checks return false
    if: |-
      ${{
        needs.initCheckDev.outputs.app_check == '0' &&
        needs.initCheckDev.outputs.sp_check == '0' &&
        needs.initCheckDev.outputs.acrrepo_check == '0' &&
        needs.initCheckDev.outputs.acrtoken_check == '0' &&
        needs.initCheckDev.outputs.acrscope_check == '0' &&
        needs.initCheckDev.outputs.ns_check == '0' &&
        needs.initCheckDev.outputs.githubrepo_check == '0'
      }}
    env: 
      GH_ENV: dev

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Replace token with env variables
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        files: '["./federated-credential.json", "./ResourceQuota.yaml", "./PersistentVolumeClaim.yaml"]'
      env:
        APP_NAME: ${{ env.APP_NAME }}
        GH_ORG: ${{ vars.GH_ORG }}
        GH_BRANCH: ${{ env.GH_ENV }}
        PVC_SIZE: ${{ inputs.pvc }}

    - name: Azure login OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: kubelogin with AKS
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.34'

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ vars.AKS_CLUSTER }}
        admin: false
        use-kubelogin: true

    - name: Register Azure App
      run: echo "AZURE_APP_ID=$(az ad app create --display-name ${{ env.APP_NAME }} --query "appId" -o tsv)" >> $GITHUB_ENV

    - name: Add App owner
      run: |
        az ad app owner add --id ${{ env.AZURE_APP_ID }} --owner-object-id b14a3839-eae6-453b-a37f-0e12ff845aa4
        echo "AZURE_APP_OBJ=$(az ad app show --id ${{ env.AZURE_APP_ID }} --query "id" --output tsv)" >> $GITHUB_ENV

    - name: Create Federated Credential
      run: az ad app federated-credential create --id ${{ env.AZURE_APP_ID }} --parameters federated-credential.json

    - name: Create Azure SP
      run: echo "AZURE_SP_ID=$(az ad sp create --id ${{ env.AZURE_APP_ID }} --query "id" -o tsv)" >> $GITHUB_ENV

    - name: Create ACR token
      run: echo "ACR_TOKEN_PW=$(az acr token create -n "${{ env.APP_NAME }}" -r ${{ vars.ACR_REGISTRY }} --repository ${{ env.ACR_REPO }} content/delete content/read content/write metadata/read --only-show-errors --query "credentials.passwords[?name=='password1'].value" -o tsv)" >> $GITHUB_ENV

    - name: Create AKS namespace, role assignment, apply resource quota, network policy and PVC
      run: |
        kubectl create namespace ${{ env.APP_NAME }}
        kubectl apply -f ./NetworkPolicy.yaml -f ./ResourceQuota.yaml -f ./PersistentVolumeClaim.yaml -n ${{ env.APP_NAME }}
        az role assignment create --role "Azure Kubernetes Service Cluster User Role" --assignee ${{ env.AZURE_APP_ID }} --scope /subscriptions/8fec5943-6772-4aa8-a1aa-59ef7483fd2b/resourcegroups/rg-dev-eas-aks-01/providers/Microsoft.ContainerService/managedClusters/aks-zup2kwh4fwbse
        az role assignment create --role "Azure Kubernetes Service RBAC Writer" --assignee ${{ env.AZURE_APP_ID }} --scope /subscriptions/8fec5943-6772-4aa8-a1aa-59ef7483fd2b/resourcegroups/rg-dev-eas-aks-01/providers/Microsoft.ContainerService/managedClusters/aks-zup2kwh4fwbse/namespaces/${{ env.APP_NAME }}
        sleep 5
        echo "AKS_PVC=$(kubectl get pvc ${{ env.APP_NAME }}-pvc -o=custom-columns="volume:.spec.volumeName" --no-headers -n ${{ env.APP_NAME }})" >> $GITHUB_ENV

#     comment: use policy to control SAS
#     az storage share policy create --name ${{ env.APP_NAME }} --share-name ${{ env.AKS_PVC }} --expiry 2047-06-30T16:00:00Z --permissions cdlrw
#     echo "AZURE_SA_SAS=$(az storage share generate-sas --name ${{ env.AKS_PVC }} --policy-name ${{ env.APP_NAME }} --output tsv)" >> $GITHUB_ENV
    - name: Create file share SAS
      run: |
        echo "AZURE_SA_SAS=$(az storage share generate-sas --name ${{ env.AKS_PVC }} --expiry 2047-06-30T16:00Z --permissions cdlrw --output tsv)" >> $GITHUB_ENV
      env:
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_SA_KEY }}
        AZURE_STORAGE_ACCOUNT: ${{ vars.AZURE_SA }}

      # Temporary change to public repo to test enviornment feature
    - name: Create Github repository
      run: |
        gh repo create ${{ vars.GH_ORG }}/${{ env.APP_NAME }} -p ${{ vars.GH_ORG }}/aks_template --include-all-branches --public
        sleep 10
        gh api --method DELETE -H "Accept: application/vnd.github+json" repos/${{ vars.GH_ORG }}/${{ env.APP_NAME }}/git/refs/heads/uat
        gh api --method PUT -H "Accept: application/vnd.github+json" repos/${{ vars.GH_ORG }}/${{ env.APP_NAME }}/environments/${{ env.GH_ENV }}
      env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Create Github Dev Branch info
      run: |          
        gh secret set ACR_TOKEN --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$ACR_TOKEN_PW"
        gh secret set AKS_AGENTPOOL --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$AKS_AGENTPOOL"
        gh secret set AZURE_CLIENT_ID --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$AZURE_APP_ID"
        gh secret set AZURE_SUBSCRIPTION_ID --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$AZURE_SUBSCRIPTION_ID"
        gh secret set AZURE_TENANT_ID --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$AZURE_TENANT_ID"
        gh secret set DB_PASSWORD --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$DB_PASSWORD"

        gh variable set ACR_USER --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$APP_NAME"
        gh variable set ACR_REGISTRY --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$ACR_REGISTRY"
        gh variable set ACR_REPO --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$ACR_REPO"
        gh variable set AKS_CLUSTER --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$AKS_CLUSTER"
        gh variable set AKS_NAMESPACE --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$APP_NAME"
        gh variable set AKS_RESOURCE_GROUP --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$AKS_RESOURCE_GROUP"
        gh variable set APP_NAME --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$APP_NAME"
        gh variable set DB_DATABASE --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$DB_DATABASE"
        gh variable set DB_HOST --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$DB_HOST"
        gh variable set DB_USER --repo ${{ vars.GH_ORG }}/${{ env.APP_NAME }} --env ${{ env.GH_ENV }} --body "$DB_USER"
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
#        ACR_TOKEN: ${{ env.ACR_TOKEN_PW }}
#        ACR_USER: ${{ env.APP_NAME }}
#        APP_NAME: ${{ env.APP_NAME }}
#        AZURE_CLIENT_ID: ${{ env.AZURE_APP_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ACR_REGISTRY: ${{ vars.ACR_REGISTRY }}
#        ACR_REPO: ${{ env.ACR_REPO }}
        AKS_AGENTPOOL: ${{ inputs.agentpooldev }}
        AKS_CLUSTER: ${{ vars.AKS_CLUSTER }}
#        AKS_NAMESPACE: ${{ env.APP_NAME }}
        AKS_RESOURCE_GROUP: ${{ vars.AKS_RESOURCE_GROUP }}
        DB_HOST: mysql-dev-ust.mysql.database.azure.com
        DB_DATABASE: aks_app_newapp
        DB_USER: aks_app_newapp
        DB_PASSWORD: 123qweasdzxc

#    - name: Run Github repository actions
#      run: |
#        gh workflow run build_image.yml -f tag=beta -R ${{ vars.GH_ORG }}/${{ env.APP_NAME }}
#        sleep 60
#        gh workflow run deploy_app.yml -f tag=beta -f url=www.example.com -R ${{ vars.GH_ORG }}/${{ env.APP_NAME }}
#      env:
#        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Add inventory record
      run: |
        curl -k 'https://aks-backend.beatricehk.com/addApp/${{ inputs.appname }}?url=${{ inputs.url}}&faculty_in_charge=${{ inputs.faculty_in_charge }}&staff_in_charge=${{ inputs.staff_in_charge }}&department=${{ inputs.department }}&password=${{ env.ACR_TOKEN_PW }}'


    - name: Debug
      run: |
        echo "App name: ${{ env.APP_NAME }}"
        echo "App ID: ${{ env.AZURE_APP_ID }}, Object ID: ${{ env.AZURE_APP_OBJ }}"
        echo "SP ID: ${{ env.AZURE_SP_ID }}"
        echo "PVC name: ${{ env.AKS_PVC }}"
        echo "File share SAS: ${{ env.AZURE_SA_SAS }}"
        echo "ACR token (space seperated):"
        echo ${{ env.ACR_TOKEN_PW }} | sed 's/./& /g'
        echo "Mysql DB: ${{ env.DB_DATABASE }}, User: ${{ env.DB_USER }}, PW: ${{ env.DB_PASSWORD }}"
