name: Creation init check reusable workflow

on:
  workflow_call:
    inputs:
      appenv:
        description: Environment
        type: string
        required: true
      appname:
        description: Application Name
        type: string
        required: true
      acrrepo:
        description: ACR Repository Name
        type: string
        required: true
      AKS_RESOURCE_GROUP:
        type: string
        required: true
      AKS_CLUSTER:
        type: string
        required: true
      ACR_REGISTRY:
        type: string
        required: true
      GH_ORG:
        type: string
        required: true

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      GH_TOKEN:
        required: true

    outputs:
      initCheck_status:
        description: Check result
        value: ${{ jobs.initCheck.outputs.initCheck_status }}

permissions:
  id-token: write
  contents: read

jobs:

  initCheck:
    runs-on: ubuntu-latest
    #environment: ${{ inputs.appenv }}
    outputs:
      initCheck_status: ${{ steps.check_status.outputs.status }}

    steps:
    - name: Azure login OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: kubelogin with AKS
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.34'

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ inputs.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ inputs.AKS_CLUSTER }}
        admin: false
        use-kubelogin: true

    - name: Check Azure App
      run: echo "app_check=$(az ad app list --filter "displayname eq '${{ inputs.appname }}'" -o tsv | wc -l)" >> $GITHUB_ENV

    - name: Check Azure SP
      run: echo "sp_check=$(az ad sp list --display-name '${{ inputs.appname }}' -o tsv | wc -l)" >> $GITHUB_ENV

    - name: Check ACR repository
      run: echo "acrrepo_check=$(az acr repository list -n ${{ inputs.ACR_REGISTRY }} --query "[?contains(@, '${{ inputs.acrrepo }}')]" -o tsv | wc -l)" >> $GITHUB_ENV

    - name: Check ACR token
      run: echo "acrtoken_check=$(az acr token show -r ${{ inputs.ACR_REGISTRY }} -n ${{ inputs.appname }} -o tsv | wc -l)" >> $GITHUB_ENV

    - name: Check ACR scope map
      run: echo "acrscope_check=$(az acr scope-map show -r ${{ inputs.ACR_REGISTRY }} -n ${{ inputs.appname }}-scope-map -o tsv | wc -l)" >> $GITHUB_ENV

    - name: Check AKS namespace
      run: echo "ns_check=$(kubectl get namespace ${{ inputs.appname }} --ignore-not-found --no-headers | wc -l)" >> $GITHUB_ENV

    - name: Check Github repository
      run: echo "githubrepo_check=$(gh repo list ${{ inputs.GH_ORG }} --json name | grep '\"${{ inputs.appname }}\"' | wc -l)" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: export check status
      id: check_status
      run: |-
        if [ ${{ env.app_check }} == '0' ] && \
           [ ${{ env.sp_check }} == '0' ] && \
           [ ${{ env.acrrepo_check }} == '0' ] && \
           [ ${{ env.acrtoken_check }} == '0' ] && \
           [ ${{ env.acrscope_check }} == '0' ] && \
           [ ${{ env.ns_check }} == '0' ] && \
           [ ${{ env.githubrepo_check }} == '0' ]
        then
          echo "status=0" >> $GITHUB_OUTPUT
        else
          echo "status=1" >> $GITHUB_OUTPUT
        fi

    - name: Display check status
      run: |
        echo "App check: ${{ env.app_check }}"
        echo "SP check: ${{ env.sp_check }}"
        echo "ARC repository check: ${{ env.acrrepo_check }}"
        echo "ACR token check: ${{ env.acrtoken_check }}"
        echo "ACR scope map check: ${{ env.acrscope_check }}"
        echo "Namespace check: ${{ env.ns_check }}"
        echo "Github repository check: ${{ env.githubrepo_check }}"
        echo "Overall check: ${{ steps.check_status.outputs.status }}"
